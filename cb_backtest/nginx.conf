server
{
    listen 80;
    listen 443 ssl;
    listen 443 quic;
    http2 on;
    server_name convertedbond.cn;
    index index.html index.htm default.htm default.html;
    root /www/wwwroot/myproject;
    #CERT-APPLY-CHECK--START
    # 用于SSL证书申请时的文件验证相关配置 -- 请勿删除
    include /www/server/panel/vhost/nginx/well-known/cb_backtest.conf;
    #CERT-APPLY-CHECK--END
    location / {
# proxy_pass 指向你的后端应用监听的地址和端口
# 例如，如果你的 Python 应用运行在本地的 8000 端口:
      proxy_pass http://127.0.0.1:8000;

# --- 常用的反向代理头部设置 ---
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

# --- WebSocket 支持 (如果需要) ---
# proxy_http_version 1.1;
# proxy_set_header Upgrade $http_upgrade;
# proxy_set_header Connection "upgrade";

# --- 其他配置 (超时等) ---
# proxy_connect_timeout 60s;
# proxy_read_timeout 60s;
# proxy_send_timeout 60s;
    }

    #SSL-START SSL相关配置
    #error_page 404/404.html;
    ssl_certificate    /www/server/panel/vhost/cert/cb_backtest/fullchain.pem;
    ssl_certificate_key    /www/server/panel/vhost/cert/cb_backtest/privkey.pem;
    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    add_header Strict-Transport-Security "max-age=31536000";
    add_header Alt-Svc 'quic=":443"; h3=":443"; h3-29=":443"; h3-27=":443";h3-25=":443"; h3-T050=":443"; h3-Q050=":443";h3-Q049=":443";h3-Q048=":443"; h3-Q046=":443"; h3-Q043=":443"';
    error_page 497  https://$host$request_uri;

    
    #SSL-END

    #ERROR-PAGE-START  错误页相关配置
    #error_page 404 /404.html;
    #error_page 502 /502.html;
    #ERROR-PAGE-END


    #REWRITE-START 伪静态相关配置
    include /www/server/panel/vhost/rewrite/python_cb_backtest.conf;
    #REWRITE-END

    #禁止访问的文件或目录
    location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md|package.json|package-lock.json|\.env) {
        return 404;
    }

    # #一键申请SSL证书验证目录相关设置
    # location /.well-known/ {
    #     root /www/wwwroot/java_node_ssl;
    # }

    #禁止在证书验证目录放入敏感文件
    if ( $uri ~ "^/\.well-known/.*\.(php|jsp|py|js|css|lua|ts|go|zip|tar\.gz|rar|7z|sql|bak)$" ) {
        return 403;
    }

    # # HTTP反向代理相关配置开始 >>>
    # location ~ /purge(/.*) {
    #     proxy_cache_purge cache_one 127.0.0.1$request_uri$is_args$args;
    # }

    # proxy

    # HTTP反向代理相关配置结束 <<<

    access_log  /www/wwwlogs/cb_backtest.log;
    error_log  /www/wwwlogs/cb_backtest.error.log;
}